/**
 * RUVDS API
 * # Введение  RUVDS API позволяет управлять серверами с помощью HTTP запросов.  API позволяет автоматически создать множество серверов, получить их статус, информацию о тарифах, датацентрах, платежах при помощи скриптов.  Документация по API начинается с общего обзора технологий, которые были реализованы. Затем представлена справочная информация о вызовах API.   ## История изменений |Версия|Дата|Изменения| |---|---|---| |2.16|2024-07-19| Для всех запросов добавлены JavaScript примеры. | |2.15|2024-07-04| Для всех запросов добавлены Python примеры. | |2.14|2024-06-26| Для всех запросов добавлены Powershell примеры. | |2.13|2024-06-19| Для всех запросов добавлены cURL примеры. | |2.12|2024-06-11| Добавлена возможность получения состояния питания и даты, до которой оплачен сервер. В методы управления сервером, добавлен возвращаемый код ошибки `409`. | |2.11|2024-05-29| Добавлена возможность управления SSH ключами и указания SSH ключа при создании сервера. | |2.10|2023-11-27| Добавлена возможность получения начального пароля от сервера при помощи GET запроса. `GET /v2/servers/$VIRTUAL_SERVER_ID/start_password` Требуется токен с правами `remove`. | |2.9|2023-11-24| Добавлена возможность получения скриншота сервера. `GET /v2/servers/$VIRTUAL_SERVER_ID/screenshot` | |2.8|2023-11-20| Ответ со статусом `403` теперь возвращает объект `api_forbidden_error`. В данном объекте дополнительно содержится поле `user_id`. | |2.7|2023-11-09| Добавлена возможность получения информации о стоимости продления виртуального сервера. `GET /v2/servers/$VIRTUAL_SERVER_ID/cost` | |2.6|2023-11-09| Добавлена возможность получения начального пароля от сервера. `POST /v2/servers/$VIRTUAL_SERVER_ID/start_password` | |2.5|2023-11-08| Добавлено получение IP адресов виртуального сервера. `GET /v2/servers/$VIRTUAL_SERVER_ID/networks` | |2.4|2023-11-07| Добавлено поле `datacenter` в объект `server`, который возвращается при получении статуса сервера. | |2.3|2023-10-31| Теперь можно предварительно узнать стоимость создания и изменения сервера при помощи параметра `get_price_only`. <br /><br /> Изменен возвращаемый объект при изменении сервера `PUT /v2/servers`. | |2.2|2023-10-23| В модель `action_error` добавлены новые типы ошибок `server_wait_for_payment` и `too_much_servers_wait_for_payment`. <br /><br /> В модель `api_action` добавлен статус `wait_user_action`. <br /><br /> Добавлена возможность выпускать токен с правами на запись. | |2.1|2023-10-12| В модель `api_error` добавлены новые типы ошибок `conflict` и `unexpected_error`. |   ## Запросы Основоной URL, на который отправляются запросы: `https://api.ruvds.com`.  Все запросы выполняются посредством HTTPS на соответствующий URI. Таким образом весть трафик зашифрован. Методы запросов соответствуют HTTP протоколу.  |Метод HTTP|Использование| |---|---| |GET| Получение информации. Данный запрос не изменяет объект. | |DELETE| Удаление объекта. Если объект не найден, то будет возвращен соответствующий код. Идемпотентность означает, что перед удалением нет необходимости проверять наличие объекта. Конечное состояние после удаления будет одним и тем же независимо от наличия объекта. | |PUT| Обновление объекта. | |POST| Создание объекта. | 
 *
 * The version of the OpenAPI document: 2.16
 * Contact: support@ruvds.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ActionError from './ActionError';

/**
 * The ApiAction model module.
 * @module model/ApiAction
 * @version 2.16
 */
class ApiAction {
    /**
     * Constructs a new <code>ApiAction</code>.
     * @alias module:model/ApiAction
     * @param id {Number} Уникальный ID действия.
     * @param type {module:model/ApiAction.TypeEnum} * `server_create` - Действие создается при отправке запроса через API на создание виртуального сервера. * `server_change` - Действие создается при отправке запроса через API на изменение конфигурации виртуального сервера. * `server_remove` - Действие создается при отправке запроса через API на удаление виртуального сервера. * `power_on` - Действие создается при отправке запроса через API на включение виртуального сервера. * `power_off` - Действие создается при отправке запроса через API на отключение питания виртуального сервера. * `shutdown` - Действие создается при отправке запроса через API на выключение виртуального сервера посредством отправки команды гостевой ОС. * `reboot` - Действие создается при отправке запроса через API на перезагрузку виртуального сервера. * `unknown` - Неизвестное действие, например, созданное не через API.
     * @param status {module:model/ApiAction.StatusEnum} * `running` - Действие в процессе выполнения. * `success` - Действие успешно завершилось. * `error` - Действие завершилось с ошибкой. * `wait_user_action` - Для продолжения выполнения необходимо действие со стороны пользователя. Например, внесение оплаты.
     * @param progress {Number} Прогресс действия в процентах. У завершенных действий значение 100.
     * @param started {Date} Время начала действия.
     * @param resourceId {Number} ID ресурса к которому относится данное действие.
     * @param resourceType {module:model/ApiAction.ResourceTypeEnum} * `server` - Действие посредством API над виртуальным сервером. Поле `resource_id` содержит ID сервера.
     */
    constructor(id, type, status, progress, started, resourceId, resourceType) { 
        
        ApiAction.initialize(this, id, type, status, progress, started, resourceId, resourceType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, type, status, progress, started, resourceId, resourceType) { 
        obj['id'] = id;
        obj['type'] = type;
        obj['status'] = status;
        obj['progress'] = progress;
        obj['started'] = started;
        obj['resource_id'] = resourceId;
        obj['resource_type'] = resourceType;
    }

    /**
     * Constructs a <code>ApiAction</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ApiAction} obj Optional instance to populate.
     * @return {module:model/ApiAction} The populated <code>ApiAction</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ApiAction();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('progress')) {
                obj['progress'] = ApiClient.convertToType(data['progress'], 'Number');
            }
            if (data.hasOwnProperty('started')) {
                obj['started'] = ApiClient.convertToType(data['started'], 'Date');
            }
            if (data.hasOwnProperty('finished')) {
                obj['finished'] = ApiClient.convertToType(data['finished'], 'Date');
            }
            if (data.hasOwnProperty('resource_id')) {
                obj['resource_id'] = ApiClient.convertToType(data['resource_id'], 'Number');
            }
            if (data.hasOwnProperty('resource_type')) {
                obj['resource_type'] = ApiClient.convertToType(data['resource_type'], 'String');
            }
            if (data.hasOwnProperty('action_error')) {
                obj['action_error'] = ActionError.constructFromObject(data['action_error']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ApiAction</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ApiAction</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ApiAction.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['resource_type'] && !(typeof data['resource_type'] === 'string' || data['resource_type'] instanceof String)) {
            throw new Error("Expected the field `resource_type` to be a primitive type in the JSON string but got " + data['resource_type']);
        }
        // validate the optional field `action_error`
        if (data['action_error']) { // data not null
          ActionError.validateJSON(data['action_error']);
        }

        return true;
    }


}

ApiAction.RequiredProperties = ["id", "type", "status", "progress", "started", "resource_id", "resource_type"];

/**
 * Уникальный ID действия.
 * @member {Number} id
 */
ApiAction.prototype['id'] = undefined;

/**
 * * `server_create` - Действие создается при отправке запроса через API на создание виртуального сервера. * `server_change` - Действие создается при отправке запроса через API на изменение конфигурации виртуального сервера. * `server_remove` - Действие создается при отправке запроса через API на удаление виртуального сервера. * `power_on` - Действие создается при отправке запроса через API на включение виртуального сервера. * `power_off` - Действие создается при отправке запроса через API на отключение питания виртуального сервера. * `shutdown` - Действие создается при отправке запроса через API на выключение виртуального сервера посредством отправки команды гостевой ОС. * `reboot` - Действие создается при отправке запроса через API на перезагрузку виртуального сервера. * `unknown` - Неизвестное действие, например, созданное не через API.
 * @member {module:model/ApiAction.TypeEnum} type
 */
ApiAction.prototype['type'] = undefined;

/**
 * * `running` - Действие в процессе выполнения. * `success` - Действие успешно завершилось. * `error` - Действие завершилось с ошибкой. * `wait_user_action` - Для продолжения выполнения необходимо действие со стороны пользователя. Например, внесение оплаты.
 * @member {module:model/ApiAction.StatusEnum} status
 */
ApiAction.prototype['status'] = undefined;

/**
 * Прогресс действия в процентах. У завершенных действий значение 100.
 * @member {Number} progress
 */
ApiAction.prototype['progress'] = undefined;

/**
 * Время начала действия.
 * @member {Date} started
 */
ApiAction.prototype['started'] = undefined;

/**
 * Время окончания действия.
 * @member {Date} finished
 */
ApiAction.prototype['finished'] = undefined;

/**
 * ID ресурса к которому относится данное действие.
 * @member {Number} resource_id
 */
ApiAction.prototype['resource_id'] = undefined;

/**
 * * `server` - Действие посредством API над виртуальным сервером. Поле `resource_id` содержит ID сервера.
 * @member {module:model/ApiAction.ResourceTypeEnum} resource_type
 */
ApiAction.prototype['resource_type'] = undefined;

/**
 * @member {module:model/ActionError} action_error
 */
ApiAction.prototype['action_error'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
ApiAction['TypeEnum'] = {

    /**
     * value: "server_create"
     * @const
     */
    "server_create": "server_create",

    /**
     * value: "server_change"
     * @const
     */
    "server_change": "server_change",

    /**
     * value: "server_remove"
     * @const
     */
    "server_remove": "server_remove",

    /**
     * value: "power_on"
     * @const
     */
    "power_on": "power_on",

    /**
     * value: "power_off"
     * @const
     */
    "power_off": "power_off",

    /**
     * value: "shutdown"
     * @const
     */
    "shutdown": "shutdown",

    /**
     * value: "reboot"
     * @const
     */
    "reboot": "reboot",

    /**
     * value: "unknown"
     * @const
     */
    "unknown": "unknown"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
ApiAction['StatusEnum'] = {

    /**
     * value: "running"
     * @const
     */
    "running": "running",

    /**
     * value: "success"
     * @const
     */
    "success": "success",

    /**
     * value: "error"
     * @const
     */
    "error": "error",

    /**
     * value: "wait_user_action"
     * @const
     */
    "wait_user_action": "wait_user_action"
};


/**
 * Allowed values for the <code>resource_type</code> property.
 * @enum {String}
 * @readonly
 */
ApiAction['ResourceTypeEnum'] = {

    /**
     * value: "server"
     * @const
     */
    "server": "server"
};



export default ApiAction;

