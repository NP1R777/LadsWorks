/**
 * RUVDS API
 * # Введение  RUVDS API позволяет управлять серверами с помощью HTTP запросов.  API позволяет автоматически создать множество серверов, получить их статус, информацию о тарифах, датацентрах, платежах при помощи скриптов.  Документация по API начинается с общего обзора технологий, которые были реализованы. Затем представлена справочная информация о вызовах API.   ## История изменений |Версия|Дата|Изменения| |---|---|---| |2.16|2024-07-19| Для всех запросов добавлены JavaScript примеры. | |2.15|2024-07-04| Для всех запросов добавлены Python примеры. | |2.14|2024-06-26| Для всех запросов добавлены Powershell примеры. | |2.13|2024-06-19| Для всех запросов добавлены cURL примеры. | |2.12|2024-06-11| Добавлена возможность получения состояния питания и даты, до которой оплачен сервер. В методы управления сервером, добавлен возвращаемый код ошибки `409`. | |2.11|2024-05-29| Добавлена возможность управления SSH ключами и указания SSH ключа при создании сервера. | |2.10|2023-11-27| Добавлена возможность получения начального пароля от сервера при помощи GET запроса. `GET /v2/servers/$VIRTUAL_SERVER_ID/start_password` Требуется токен с правами `remove`. | |2.9|2023-11-24| Добавлена возможность получения скриншота сервера. `GET /v2/servers/$VIRTUAL_SERVER_ID/screenshot` | |2.8|2023-11-20| Ответ со статусом `403` теперь возвращает объект `api_forbidden_error`. В данном объекте дополнительно содержится поле `user_id`. | |2.7|2023-11-09| Добавлена возможность получения информации о стоимости продления виртуального сервера. `GET /v2/servers/$VIRTUAL_SERVER_ID/cost` | |2.6|2023-11-09| Добавлена возможность получения начального пароля от сервера. `POST /v2/servers/$VIRTUAL_SERVER_ID/start_password` | |2.5|2023-11-08| Добавлено получение IP адресов виртуального сервера. `GET /v2/servers/$VIRTUAL_SERVER_ID/networks` | |2.4|2023-11-07| Добавлено поле `datacenter` в объект `server`, который возвращается при получении статуса сервера. | |2.3|2023-10-31| Теперь можно предварительно узнать стоимость создания и изменения сервера при помощи параметра `get_price_only`. <br /><br /> Изменен возвращаемый объект при изменении сервера `PUT /v2/servers`. | |2.2|2023-10-23| В модель `action_error` добавлены новые типы ошибок `server_wait_for_payment` и `too_much_servers_wait_for_payment`. <br /><br /> В модель `api_action` добавлен статус `wait_user_action`. <br /><br /> Добавлена возможность выпускать токен с правами на запись. | |2.1|2023-10-12| В модель `api_error` добавлены новые типы ошибок `conflict` и `unexpected_error`. |   ## Запросы Основоной URL, на который отправляются запросы: `https://api.ruvds.com`.  Все запросы выполняются посредством HTTPS на соответствующий URI. Таким образом весть трафик зашифрован. Методы запросов соответствуют HTTP протоколу.  |Метод HTTP|Использование| |---|---| |GET| Получение информации. Данный запрос не изменяет объект. | |DELETE| Удаление объекта. Если объект не найден, то будет возвращен соответствующий код. Идемпотентность означает, что перед удалением нет необходимости проверять наличие объекта. Конечное состояние после удаления будет одним и тем же независимо от наличия объекта. | |PUT| Обновление объекта. | |POST| Создание объекта. | 
 *
 * The version of the OpenAPI document: 2.16
 * Contact: support@ruvds.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ActionError model module.
 * @module model/ActionError
 * @version 2.16
 */
class ActionError {
    /**
     * Constructs a new <code>ActionError</code>.
     * @alias module:model/ActionError
     */
    constructor() { 
        
        ActionError.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ActionError</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ActionError} obj Optional instance to populate.
     * @return {module:model/ActionError} The populated <code>ActionError</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ActionError();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ActionError</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ActionError</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }

        return true;
    }


}



/**
 * Короткий идентификатор ошибки.
 * @member {module:model/ActionError.IdEnum} id
 */
ActionError.prototype['id'] = undefined;

/**
 * Дополнительная информация об ошибке. * `internal_error` - Внутренняя ошибка сервера. При возникновении такой ошибки можно попробовать выполнить запрос позже. * `insufficient_balance` - Недостаточно средста на балансе пользователя. Ошибка может возникнуть при создании сервера или изменении конфигурации. * `max_ip_reached` - В данный момент недостаточно IP адресов для создания сервера. * `paid_till_gap` - Для завершения операции необходимо, чтобы сервер был оплачен. * `server_is_offline` - Изменения концигурации сервера в данный момент недоступно. * `insufficient_resource` - Недостаточно ресурсов. * `change_config_limit` - Достигнуто максимальное количество изменений конфигурации сервера. * `unable_to_start_server` - Запуск сервера завершился с ошибкой. * `unable_to_stop_server` - Остановка сервера завершилась с ошибкой. * `unable_to_shrink_drive` - Уменьшение размера диска завершилось с ошибкой. * `unable_to_change_configuration` - Изменение концигурации сервера завершилось с ошибкой. * `no_available_resource` - Недостаточно ресурсов для изменения конфигурации. * `server_wait_for_payment` - Запрос на создание сервера сохранен. Дальнейшее создание начнется после оплаты сервера. * `too_much_servers_wait_for_payment` - Слишком много запросов на создание неоплаченных серверов. Необходимо оплатить предыдущие серверы, ожидающие оплаты.
 * @member {String} message
 */
ActionError.prototype['message'] = undefined;





/**
 * Allowed values for the <code>id</code> property.
 * @enum {String}
 * @readonly
 */
ActionError['IdEnum'] = {

    /**
     * value: "internal_error"
     * @const
     */
    "internal_error": "internal_error",

    /**
     * value: "insufficient_balance"
     * @const
     */
    "insufficient_balance": "insufficient_balance",

    /**
     * value: "max_ip_reached"
     * @const
     */
    "max_ip_reached": "max_ip_reached",

    /**
     * value: "paid_till_gap"
     * @const
     */
    "paid_till_gap": "paid_till_gap",

    /**
     * value: "server_is_offline"
     * @const
     */
    "server_is_offline": "server_is_offline",

    /**
     * value: "insufficient_resource"
     * @const
     */
    "insufficient_resource": "insufficient_resource",

    /**
     * value: "change_config_limit"
     * @const
     */
    "change_config_limit": "change_config_limit",

    /**
     * value: "unable_to_start_server"
     * @const
     */
    "unable_to_start_server": "unable_to_start_server",

    /**
     * value: "unable_to_stop_server"
     * @const
     */
    "unable_to_stop_server": "unable_to_stop_server",

    /**
     * value: "unable_to_shrink_drive"
     * @const
     */
    "unable_to_shrink_drive": "unable_to_shrink_drive",

    /**
     * value: "unable_to_change_configuration"
     * @const
     */
    "unable_to_change_configuration": "unable_to_change_configuration",

    /**
     * value: "no_available_resource"
     * @const
     */
    "no_available_resource": "no_available_resource",

    /**
     * value: "server_wait_for_payment"
     * @const
     */
    "server_wait_for_payment": "server_wait_for_payment",

    /**
     * value: "too_much_servers_wait_for_payment"
     * @const
     */
    "too_much_servers_wait_for_payment": "too_much_servers_wait_for_payment"
};



export default ActionError;

