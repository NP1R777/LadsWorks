/**
 * RUVDS API
 * # Введение  RUVDS API позволяет управлять серверами с помощью HTTP запросов.  API позволяет автоматически создать множество серверов, получить их статус, информацию о тарифах, датацентрах, платежах при помощи скриптов.  Документация по API начинается с общего обзора технологий, которые были реализованы. Затем представлена справочная информация о вызовах API.   ## История изменений |Версия|Дата|Изменения| |---|---|---| |2.16|2024-07-19| Для всех запросов добавлены JavaScript примеры. | |2.15|2024-07-04| Для всех запросов добавлены Python примеры. | |2.14|2024-06-26| Для всех запросов добавлены Powershell примеры. | |2.13|2024-06-19| Для всех запросов добавлены cURL примеры. | |2.12|2024-06-11| Добавлена возможность получения состояния питания и даты, до которой оплачен сервер. В методы управления сервером, добавлен возвращаемый код ошибки `409`. | |2.11|2024-05-29| Добавлена возможность управления SSH ключами и указания SSH ключа при создании сервера. | |2.10|2023-11-27| Добавлена возможность получения начального пароля от сервера при помощи GET запроса. `GET /v2/servers/$VIRTUAL_SERVER_ID/start_password` Требуется токен с правами `remove`. | |2.9|2023-11-24| Добавлена возможность получения скриншота сервера. `GET /v2/servers/$VIRTUAL_SERVER_ID/screenshot` | |2.8|2023-11-20| Ответ со статусом `403` теперь возвращает объект `api_forbidden_error`. В данном объекте дополнительно содержится поле `user_id`. | |2.7|2023-11-09| Добавлена возможность получения информации о стоимости продления виртуального сервера. `GET /v2/servers/$VIRTUAL_SERVER_ID/cost` | |2.6|2023-11-09| Добавлена возможность получения начального пароля от сервера. `POST /v2/servers/$VIRTUAL_SERVER_ID/start_password` | |2.5|2023-11-08| Добавлено получение IP адресов виртуального сервера. `GET /v2/servers/$VIRTUAL_SERVER_ID/networks` | |2.4|2023-11-07| Добавлено поле `datacenter` в объект `server`, который возвращается при получении статуса сервера. | |2.3|2023-10-31| Теперь можно предварительно узнать стоимость создания и изменения сервера при помощи параметра `get_price_only`. <br /><br /> Изменен возвращаемый объект при изменении сервера `PUT /v2/servers`. | |2.2|2023-10-23| В модель `action_error` добавлены новые типы ошибок `server_wait_for_payment` и `too_much_servers_wait_for_payment`. <br /><br /> В модель `api_action` добавлен статус `wait_user_action`. <br /><br /> Добавлена возможность выпускать токен с правами на запись. | |2.1|2023-10-12| В модель `api_error` добавлены новые типы ошибок `conflict` и `unexpected_error`. |   ## Запросы Основоной URL, на который отправляются запросы: `https://api.ruvds.com`.  Все запросы выполняются посредством HTTPS на соответствующий URI. Таким образом весть трафик зашифрован. Методы запросов соответствуют HTTP протоколу.  |Метод HTTP|Использование| |---|---| |GET| Получение информации. Данный запрос не изменяет объект. | |DELETE| Удаление объекта. Если объект не найден, то будет возвращен соответствующий код. Идемпотентность означает, что перед удалением нет необходимости проверять наличие объекта. Конечное состояние после удаления будет одним и тем же независимо от наличия объекта. | |PUT| Обновление объекта. | |POST| Создание объекта. | 
 *
 * The version of the OpenAPI document: 2.16
 * Contact: support@ruvds.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PaymentPeriod from './PaymentPeriod';

/**
 * The Server model module.
 * @module model/Server
 * @version 2.16
 */
class Server {
    /**
     * Constructs a new <code>Server</code>.
     * @alias module:model/Server
     * @param virtualServerId {Number} ID сервера в системе.
     * @param status {module:model/Server.StatusEnum} Одно из возможных значений статуса сервера.
     * @param createProgress {Number} Прогресс создания сервера. Для созданного сервера это значение 100.
     * @param datacenter {Number} ID дата-центра. Сответствует полю `id` объекта `datacenter`. Информацию о дата-центрах можно получить в разделе `Datacenters`.
     * @param tariffId {Number} Тарифный план
     * @param paymentPeriod {module:model/PaymentPeriod} 
     * @param osId {Number} Id операционной системы. Может быть null для несозданного сервера.
     * @param templateId {String} Шаблон, который использовался при создании сервера. Может быть null если при создании не использовался шаблон.
     * @param cpu {Number} Количество ядер CPU.
     * @param ram {Number} RAM в GB.
     * @param drive {Number} Размер основного диска в GB
     * @param driveTariffId {Number} Тарифный план определяющий типа диска из массива drive на котором установлена ОС
     * @param ip {Number} Количество IP адресов
     */
    constructor(virtualServerId, status, createProgress, datacenter, tariffId, paymentPeriod, osId, templateId, cpu, ram, drive, driveTariffId, ip) { 
        
        Server.initialize(this, virtualServerId, status, createProgress, datacenter, tariffId, paymentPeriod, osId, templateId, cpu, ram, drive, driveTariffId, ip);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, virtualServerId, status, createProgress, datacenter, tariffId, paymentPeriod, osId, templateId, cpu, ram, drive, driveTariffId, ip) { 
        obj['virtual_server_id'] = virtualServerId;
        obj['status'] = status;
        obj['create_progress'] = createProgress;
        obj['datacenter'] = datacenter;
        obj['tariff_id'] = tariffId;
        obj['payment_period'] = paymentPeriod;
        obj['os_id'] = osId;
        obj['template_id'] = templateId;
        obj['cpu'] = cpu;
        obj['ram'] = ram;
        obj['drive'] = drive;
        obj['drive_tariff_id'] = driveTariffId;
        obj['ip'] = ip;
    }

    /**
     * Constructs a <code>Server</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Server} obj Optional instance to populate.
     * @return {module:model/Server} The populated <code>Server</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Server();

            if (data.hasOwnProperty('virtual_server_id')) {
                obj['virtual_server_id'] = ApiClient.convertToType(data['virtual_server_id'], 'Number');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('create_progress')) {
                obj['create_progress'] = ApiClient.convertToType(data['create_progress'], 'Number');
            }
            if (data.hasOwnProperty('datacenter')) {
                obj['datacenter'] = ApiClient.convertToType(data['datacenter'], 'Number');
            }
            if (data.hasOwnProperty('tariff_id')) {
                obj['tariff_id'] = ApiClient.convertToType(data['tariff_id'], 'Number');
            }
            if (data.hasOwnProperty('payment_period')) {
                obj['payment_period'] = PaymentPeriod.constructFromObject(data['payment_period']);
            }
            if (data.hasOwnProperty('os_id')) {
                obj['os_id'] = ApiClient.convertToType(data['os_id'], 'Number');
            }
            if (data.hasOwnProperty('template_id')) {
                obj['template_id'] = ApiClient.convertToType(data['template_id'], 'String');
            }
            if (data.hasOwnProperty('cpu')) {
                obj['cpu'] = ApiClient.convertToType(data['cpu'], 'Number');
            }
            if (data.hasOwnProperty('ram')) {
                obj['ram'] = ApiClient.convertToType(data['ram'], 'Number');
            }
            if (data.hasOwnProperty('vram')) {
                obj['vram'] = ApiClient.convertToType(data['vram'], 'Number');
            }
            if (data.hasOwnProperty('drive')) {
                obj['drive'] = ApiClient.convertToType(data['drive'], 'Number');
            }
            if (data.hasOwnProperty('drive_tariff_id')) {
                obj['drive_tariff_id'] = ApiClient.convertToType(data['drive_tariff_id'], 'Number');
            }
            if (data.hasOwnProperty('additional_drive')) {
                obj['additional_drive'] = ApiClient.convertToType(data['additional_drive'], 'Number');
            }
            if (data.hasOwnProperty('additional_drive_tariff_id')) {
                obj['additional_drive_tariff_id'] = ApiClient.convertToType(data['additional_drive_tariff_id'], 'Number');
            }
            if (data.hasOwnProperty('ip')) {
                obj['ip'] = ApiClient.convertToType(data['ip'], 'Number');
            }
            if (data.hasOwnProperty('ddos_protection')) {
                obj['ddos_protection'] = ApiClient.convertToType(data['ddos_protection'], 'Number');
            }
            if (data.hasOwnProperty('user_comment')) {
                obj['user_comment'] = ApiClient.convertToType(data['user_comment'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Server</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Server</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Server.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['template_id'] && !(typeof data['template_id'] === 'string' || data['template_id'] instanceof String)) {
            throw new Error("Expected the field `template_id` to be a primitive type in the JSON string but got " + data['template_id']);
        }
        // ensure the json data is a string
        if (data['user_comment'] && !(typeof data['user_comment'] === 'string' || data['user_comment'] instanceof String)) {
            throw new Error("Expected the field `user_comment` to be a primitive type in the JSON string but got " + data['user_comment']);
        }

        return true;
    }


}

Server.RequiredProperties = ["virtual_server_id", "status", "create_progress", "datacenter", "tariff_id", "payment_period", "os_id", "template_id", "cpu", "ram", "drive", "drive_tariff_id", "ip"];

/**
 * ID сервера в системе.
 * @member {Number} virtual_server_id
 */
Server.prototype['virtual_server_id'] = undefined;

/**
 * Одно из возможных значений статуса сервера.
 * @member {module:model/Server.StatusEnum} status
 */
Server.prototype['status'] = undefined;

/**
 * Прогресс создания сервера. Для созданного сервера это значение 100.
 * @member {Number} create_progress
 */
Server.prototype['create_progress'] = undefined;

/**
 * ID дата-центра. Сответствует полю `id` объекта `datacenter`. Информацию о дата-центрах можно получить в разделе `Datacenters`.
 * @member {Number} datacenter
 */
Server.prototype['datacenter'] = undefined;

/**
 * Тарифный план
 * @member {Number} tariff_id
 */
Server.prototype['tariff_id'] = undefined;

/**
 * @member {module:model/PaymentPeriod} payment_period
 */
Server.prototype['payment_period'] = undefined;

/**
 * Id операционной системы. Может быть null для несозданного сервера.
 * @member {Number} os_id
 */
Server.prototype['os_id'] = undefined;

/**
 * Шаблон, который использовался при создании сервера. Может быть null если при создании не использовался шаблон.
 * @member {String} template_id
 */
Server.prototype['template_id'] = undefined;

/**
 * Количество ядер CPU.
 * @member {Number} cpu
 */
Server.prototype['cpu'] = undefined;

/**
 * RAM в GB.
 * @member {Number} ram
 */
Server.prototype['ram'] = undefined;

/**
 * Объем видеопамяти в Мегабайтах.
 * @member {module:model/Server.VramEnum} vram
 */
Server.prototype['vram'] = undefined;

/**
 * Размер основного диска в GB
 * @member {Number} drive
 */
Server.prototype['drive'] = undefined;

/**
 * Тарифный план определяющий типа диска из массива drive на котором установлена ОС
 * @member {Number} drive_tariff_id
 */
Server.prototype['drive_tariff_id'] = undefined;

/**
 * Размер дополнительного диска в GB. В данный момент возможно только подключение Большого диска. `null` если без дополнительного диска
 * @member {Number} additional_drive
 */
Server.prototype['additional_drive'] = undefined;

/**
 * Тарифный план дополнительного диска из массива additional_drive. `null`` если без дополнительного диска
 * @member {Number} additional_drive_tariff_id
 */
Server.prototype['additional_drive_tariff_id'] = undefined;

/**
 * Количество IP адресов
 * @member {Number} ip
 */
Server.prototype['ip'] = undefined;

/**
 * Объем полосы для входящего легитимного трафика, кратный 0.5 Мбит/с. 0.0 если DDoS защита не подключена.
 * @member {Number} ddos_protection
 */
Server.prototype['ddos_protection'] = undefined;

/**
 * Пользовательский комментарий в ЛК RUVDS. Пустая строка в случае отсутствия
 * @member {String} user_comment
 */
Server.prototype['user_comment'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
Server['StatusEnum'] = {

    /**
     * value: "initializing"
     * @const
     */
    "initializing": "initializing",

    /**
     * value: "active"
     * @const
     */
    "active": "active",

    /**
     * value: "notpaid"
     * @const
     */
    "notpaid": "notpaid",

    /**
     * value: "blocked"
     * @const
     */
    "blocked": "blocked",

    /**
     * value: "deleted"
     * @const
     */
    "deleted": "deleted"
};


/**
 * Allowed values for the <code>vram</code> property.
 * @enum {Number}
 * @readonly
 */
Server['VramEnum'] = {

    /**
     * value: 0
     * @const
     */
    "0": 0,

    /**
     * value: 64
     * @const
     */
    "64": 64,

    /**
     * value: 128
     * @const
     */
    "128": 128,

    /**
     * value: 256
     * @const
     */
    "256": 256,

    /**
     * value: 512
     * @const
     */
    "512": 512,

    /**
     * value: 1024
     * @const
     */
    "1024": 1024
};



export default Server;

