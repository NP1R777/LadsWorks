/**
 * RUVDS API
 * # Введение  RUVDS API позволяет управлять серверами с помощью HTTP запросов.  API позволяет автоматически создать множество серверов, получить их статус, информацию о тарифах, датацентрах, платежах при помощи скриптов.  Документация по API начинается с общего обзора технологий, которые были реализованы. Затем представлена справочная информация о вызовах API.   ## История изменений |Версия|Дата|Изменения| |---|---|---| |2.16|2024-07-19| Для всех запросов добавлены JavaScript примеры. | |2.15|2024-07-04| Для всех запросов добавлены Python примеры. | |2.14|2024-06-26| Для всех запросов добавлены Powershell примеры. | |2.13|2024-06-19| Для всех запросов добавлены cURL примеры. | |2.12|2024-06-11| Добавлена возможность получения состояния питания и даты, до которой оплачен сервер. В методы управления сервером, добавлен возвращаемый код ошибки `409`. | |2.11|2024-05-29| Добавлена возможность управления SSH ключами и указания SSH ключа при создании сервера. | |2.10|2023-11-27| Добавлена возможность получения начального пароля от сервера при помощи GET запроса. `GET /v2/servers/$VIRTUAL_SERVER_ID/start_password` Требуется токен с правами `remove`. | |2.9|2023-11-24| Добавлена возможность получения скриншота сервера. `GET /v2/servers/$VIRTUAL_SERVER_ID/screenshot` | |2.8|2023-11-20| Ответ со статусом `403` теперь возвращает объект `api_forbidden_error`. В данном объекте дополнительно содержится поле `user_id`. | |2.7|2023-11-09| Добавлена возможность получения информации о стоимости продления виртуального сервера. `GET /v2/servers/$VIRTUAL_SERVER_ID/cost` | |2.6|2023-11-09| Добавлена возможность получения начального пароля от сервера. `POST /v2/servers/$VIRTUAL_SERVER_ID/start_password` | |2.5|2023-11-08| Добавлено получение IP адресов виртуального сервера. `GET /v2/servers/$VIRTUAL_SERVER_ID/networks` | |2.4|2023-11-07| Добавлено поле `datacenter` в объект `server`, который возвращается при получении статуса сервера. | |2.3|2023-10-31| Теперь можно предварительно узнать стоимость создания и изменения сервера при помощи параметра `get_price_only`. <br /><br /> Изменен возвращаемый объект при изменении сервера `PUT /v2/servers`. | |2.2|2023-10-23| В модель `action_error` добавлены новые типы ошибок `server_wait_for_payment` и `too_much_servers_wait_for_payment`. <br /><br /> В модель `api_action` добавлен статус `wait_user_action`. <br /><br /> Добавлена возможность выпускать токен с правами на запись. | |2.1|2023-10-12| В модель `api_error` добавлены новые типы ошибок `conflict` и `unexpected_error`. |   ## Запросы Основоной URL, на который отправляются запросы: `https://api.ruvds.com`.  Все запросы выполняются посредством HTTPS на соответствующий URI. Таким образом весть трафик зашифрован. Методы запросов соответствуют HTTP протоколу.  |Метод HTTP|Использование| |---|---| |GET| Получение информации. Данный запрос не изменяет объект. | |DELETE| Удаление объекта. Если объект не найден, то будет возвращен соответствующий код. Идемпотентность означает, что перед удалением нет необходимости проверять наличие объекта. Конечное состояние после удаления будет одним и тем же независимо от наличия объекта. | |PUT| Обновление объекта. | |POST| Создание объекта. | 
 *
 * The version of the OpenAPI document: 2.16
 * Contact: support@ruvds.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NotificationData from './NotificationData';

/**
 * The Notification model module.
 * @module model/Notification
 * @version 2.16
 */
class Notification {
    /**
     * Constructs a new <code>Notification</code>.
     * @alias module:model/Notification
     * @param notificationId {String} Уникальный ID оповещения.
     * @param status {module:model/Notification.StatusEnum} * `read` - Нотификация прочитана. * `unread` - Нотификация непрочитана.
     * @param virtualServerId {Number} ID сервера в системе.
     * @param addDt {Date} Дата и время добавления оповещения
     * @param statusUpdateDt {Date} Дата и время изменения статуса
     * @param type {module:model/Notification.TypeEnum} * `custom_notification` - оповещение общего вида * `server_banned_by_admin` - сервер был заблокирован администратором * `server_blocked` - сервер был заблокирован * `payment_period_ending` - оплаченный период подходит к концу * `promo_ending` - промо период подходит к концу * `server_started` - сервер был разблокирован * `server_removed` - сервер был удален * `violation_smtp` - сервер был заблокирован за анонимный smtp * `cloud_short_of_money` - недостаточно средств для оплаты сервера за ресурсы * `violation_dns` - небезопасный dns * `net_outgoing_violation` - заблокирован за большой исходящий трафик * `net_outgoing_warning` - предупреждение о большом исходящем трафике * `violation_firewall` - на виртуалке неактивен firewall * `info_firewall_activated`- на виртуалке активирован firewall * `violation_app` - сервер заблокирован за вредоносное ПО
     */
    constructor(notificationId, status, virtualServerId, addDt, statusUpdateDt, type) { 
        
        Notification.initialize(this, notificationId, status, virtualServerId, addDt, statusUpdateDt, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, notificationId, status, virtualServerId, addDt, statusUpdateDt, type) { 
        obj['notification_id'] = notificationId;
        obj['status'] = status;
        obj['virtual_server_id'] = virtualServerId;
        obj['add_dt'] = addDt;
        obj['status_update_dt'] = statusUpdateDt;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>Notification</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Notification} obj Optional instance to populate.
     * @return {module:model/Notification} The populated <code>Notification</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Notification();

            if (data.hasOwnProperty('notification_id')) {
                obj['notification_id'] = ApiClient.convertToType(data['notification_id'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('virtual_server_id')) {
                obj['virtual_server_id'] = ApiClient.convertToType(data['virtual_server_id'], 'Number');
            }
            if (data.hasOwnProperty('add_dt')) {
                obj['add_dt'] = ApiClient.convertToType(data['add_dt'], 'Date');
            }
            if (data.hasOwnProperty('status_update_dt')) {
                obj['status_update_dt'] = ApiClient.convertToType(data['status_update_dt'], 'Date');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('notification_data')) {
                obj['notification_data'] = NotificationData.constructFromObject(data['notification_data']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Notification</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Notification</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Notification.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['notification_id'] && !(typeof data['notification_id'] === 'string' || data['notification_id'] instanceof String)) {
            throw new Error("Expected the field `notification_id` to be a primitive type in the JSON string but got " + data['notification_id']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // validate the optional field `notification_data`
        if (data['notification_data']) { // data not null
          NotificationData.validateJSON(data['notification_data']);
        }

        return true;
    }


}

Notification.RequiredProperties = ["notification_id", "status", "virtual_server_id", "add_dt", "status_update_dt", "type"];

/**
 * Уникальный ID оповещения.
 * @member {String} notification_id
 */
Notification.prototype['notification_id'] = undefined;

/**
 * * `read` - Нотификация прочитана. * `unread` - Нотификация непрочитана.
 * @member {module:model/Notification.StatusEnum} status
 */
Notification.prototype['status'] = undefined;

/**
 * ID сервера в системе.
 * @member {Number} virtual_server_id
 */
Notification.prototype['virtual_server_id'] = undefined;

/**
 * Дата и время добавления оповещения
 * @member {Date} add_dt
 */
Notification.prototype['add_dt'] = undefined;

/**
 * Дата и время изменения статуса
 * @member {Date} status_update_dt
 */
Notification.prototype['status_update_dt'] = undefined;

/**
 * * `custom_notification` - оповещение общего вида * `server_banned_by_admin` - сервер был заблокирован администратором * `server_blocked` - сервер был заблокирован * `payment_period_ending` - оплаченный период подходит к концу * `promo_ending` - промо период подходит к концу * `server_started` - сервер был разблокирован * `server_removed` - сервер был удален * `violation_smtp` - сервер был заблокирован за анонимный smtp * `cloud_short_of_money` - недостаточно средств для оплаты сервера за ресурсы * `violation_dns` - небезопасный dns * `net_outgoing_violation` - заблокирован за большой исходящий трафик * `net_outgoing_warning` - предупреждение о большом исходящем трафике * `violation_firewall` - на виртуалке неактивен firewall * `info_firewall_activated`- на виртуалке активирован firewall * `violation_app` - сервер заблокирован за вредоносное ПО
 * @member {module:model/Notification.TypeEnum} type
 */
Notification.prototype['type'] = undefined;

/**
 * @member {module:model/NotificationData} notification_data
 */
Notification.prototype['notification_data'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
Notification['StatusEnum'] = {

    /**
     * value: "read"
     * @const
     */
    "read": "read",

    /**
     * value: "unread"
     * @const
     */
    "unread": "unread"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Notification['TypeEnum'] = {

    /**
     * value: "custom_notification"
     * @const
     */
    "custom_notification": "custom_notification",

    /**
     * value: "server_banned_by_admin"
     * @const
     */
    "server_banned_by_admin": "server_banned_by_admin",

    /**
     * value: "server_blocked"
     * @const
     */
    "server_blocked": "server_blocked",

    /**
     * value: "payment_period_ending"
     * @const
     */
    "payment_period_ending": "payment_period_ending",

    /**
     * value: "promo_ending"
     * @const
     */
    "promo_ending": "promo_ending",

    /**
     * value: "server_started"
     * @const
     */
    "server_started": "server_started",

    /**
     * value: "server_removed"
     * @const
     */
    "server_removed": "server_removed",

    /**
     * value: "violation_smtp"
     * @const
     */
    "violation_smtp": "violation_smtp",

    /**
     * value: "cloud_short_of_money"
     * @const
     */
    "cloud_short_of_money": "cloud_short_of_money",

    /**
     * value: "violation_dns"
     * @const
     */
    "violation_dns": "violation_dns",

    /**
     * value: "net_outgoing_violation"
     * @const
     */
    "net_outgoing_violation": "net_outgoing_violation",

    /**
     * value: "net_outgoing_warning"
     * @const
     */
    "net_outgoing_warning": "net_outgoing_warning",

    /**
     * value: "violation_firewall"
     * @const
     */
    "violation_firewall": "violation_firewall",

    /**
     * value: "info_firewall_activated"
     * @const
     */
    "info_firewall_activated": "info_firewall_activated",

    /**
     * value: "violation_app"
     * @const
     */
    "violation_app": "violation_app"
};



export default Notification;

