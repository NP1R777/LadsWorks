/**
 * RUVDS API
 * # Введение  RUVDS API позволяет управлять серверами с помощью HTTP запросов.  API позволяет автоматически создать множество серверов, получить их статус, информацию о тарифах, датацентрах, платежах при помощи скриптов.  Документация по API начинается с общего обзора технологий, которые были реализованы. Затем представлена справочная информация о вызовах API.   ## История изменений |Версия|Дата|Изменения| |---|---|---| |2.16|2024-07-19| Для всех запросов добавлены JavaScript примеры. | |2.15|2024-07-04| Для всех запросов добавлены Python примеры. | |2.14|2024-06-26| Для всех запросов добавлены Powershell примеры. | |2.13|2024-06-19| Для всех запросов добавлены cURL примеры. | |2.12|2024-06-11| Добавлена возможность получения состояния питания и даты, до которой оплачен сервер. В методы управления сервером, добавлен возвращаемый код ошибки `409`. | |2.11|2024-05-29| Добавлена возможность управления SSH ключами и указания SSH ключа при создании сервера. | |2.10|2023-11-27| Добавлена возможность получения начального пароля от сервера при помощи GET запроса. `GET /v2/servers/$VIRTUAL_SERVER_ID/start_password` Требуется токен с правами `remove`. | |2.9|2023-11-24| Добавлена возможность получения скриншота сервера. `GET /v2/servers/$VIRTUAL_SERVER_ID/screenshot` | |2.8|2023-11-20| Ответ со статусом `403` теперь возвращает объект `api_forbidden_error`. В данном объекте дополнительно содержится поле `user_id`. | |2.7|2023-11-09| Добавлена возможность получения информации о стоимости продления виртуального сервера. `GET /v2/servers/$VIRTUAL_SERVER_ID/cost` | |2.6|2023-11-09| Добавлена возможность получения начального пароля от сервера. `POST /v2/servers/$VIRTUAL_SERVER_ID/start_password` | |2.5|2023-11-08| Добавлено получение IP адресов виртуального сервера. `GET /v2/servers/$VIRTUAL_SERVER_ID/networks` | |2.4|2023-11-07| Добавлено поле `datacenter` в объект `server`, который возвращается при получении статуса сервера. | |2.3|2023-10-31| Теперь можно предварительно узнать стоимость создания и изменения сервера при помощи параметра `get_price_only`. <br /><br /> Изменен возвращаемый объект при изменении сервера `PUT /v2/servers`. | |2.2|2023-10-23| В модель `action_error` добавлены новые типы ошибок `server_wait_for_payment` и `too_much_servers_wait_for_payment`. <br /><br /> В модель `api_action` добавлен статус `wait_user_action`. <br /><br /> Добавлена возможность выпускать токен с правами на запись. | |2.1|2023-10-12| В модель `api_error` добавлены новые типы ошибок `conflict` и `unexpected_error`. |   ## Запросы Основоной URL, на который отправляются запросы: `https://api.ruvds.com`.  Все запросы выполняются посредством HTTPS на соответствующий URI. Таким образом весть трафик зашифрован. Методы запросов соответствуют HTTP протоколу.  |Метод HTTP|Использование| |---|---| |GET| Получение информации. Данный запрос не изменяет объект. | |DELETE| Удаление объекта. Если объект не найден, то будет возвращен соответствующий код. Идемпотентность означает, что перед удалением нет необходимости проверять наличие объекта. Конечное состояние после удаления будет одним и тем же независимо от наличия объекта. | |PUT| Обновление объекта. | |POST| Создание объекта. | 
 *
 * The version of the OpenAPI document: 2.16
 * Contact: support@ruvds.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ServerPowerState model module.
 * @module model/ServerPowerState
 * @version 2.16
 */
class ServerPowerState {
    /**
     * Constructs a new <code>ServerPowerState</code>.
     * @alias module:model/ServerPowerState
     * @param virtualServerId {Number} ID сервера в системе.
     * @param powerState {module:model/ServerPowerState.PowerStateEnum} Состояние питания виртуального сервера.   * `running` - Виртуальный сервер запущен.   * `off` - Виртуальный сервер выключен.   * `starting` - Виртуальный сервер запускается.   * `stopping` - Виртуальный сервер останавливается. 
     */
    constructor(virtualServerId, powerState) { 
        
        ServerPowerState.initialize(this, virtualServerId, powerState);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, virtualServerId, powerState) { 
        obj['virtual_server_id'] = virtualServerId;
        obj['power_state'] = powerState;
    }

    /**
     * Constructs a <code>ServerPowerState</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ServerPowerState} obj Optional instance to populate.
     * @return {module:model/ServerPowerState} The populated <code>ServerPowerState</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ServerPowerState();

            if (data.hasOwnProperty('virtual_server_id')) {
                obj['virtual_server_id'] = ApiClient.convertToType(data['virtual_server_id'], 'Number');
            }
            if (data.hasOwnProperty('power_state')) {
                obj['power_state'] = ApiClient.convertToType(data['power_state'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ServerPowerState</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ServerPowerState</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ServerPowerState.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['power_state'] && !(typeof data['power_state'] === 'string' || data['power_state'] instanceof String)) {
            throw new Error("Expected the field `power_state` to be a primitive type in the JSON string but got " + data['power_state']);
        }

        return true;
    }


}

ServerPowerState.RequiredProperties = ["virtual_server_id", "power_state"];

/**
 * ID сервера в системе.
 * @member {Number} virtual_server_id
 */
ServerPowerState.prototype['virtual_server_id'] = undefined;

/**
 * Состояние питания виртуального сервера.   * `running` - Виртуальный сервер запущен.   * `off` - Виртуальный сервер выключен.   * `starting` - Виртуальный сервер запускается.   * `stopping` - Виртуальный сервер останавливается. 
 * @member {module:model/ServerPowerState.PowerStateEnum} power_state
 */
ServerPowerState.prototype['power_state'] = undefined;





/**
 * Allowed values for the <code>power_state</code> property.
 * @enum {String}
 * @readonly
 */
ServerPowerState['PowerStateEnum'] = {

    /**
     * value: "running"
     * @const
     */
    "running": "running",

    /**
     * value: "off"
     * @const
     */
    "off": "off",

    /**
     * value: "starting"
     * @const
     */
    "starting": "starting",

    /**
     * value: "stopping"
     * @const
     */
    "stopping": "stopping"
};



export default ServerPowerState;

