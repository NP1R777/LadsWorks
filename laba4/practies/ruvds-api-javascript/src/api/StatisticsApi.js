/**
 * RUVDS API
 * # Введение  RUVDS API позволяет управлять серверами с помощью HTTP запросов.  API позволяет автоматически создать множество серверов, получить их статус, информацию о тарифах, датацентрах, платежах при помощи скриптов.  Документация по API начинается с общего обзора технологий, которые были реализованы. Затем представлена справочная информация о вызовах API.   ## История изменений |Версия|Дата|Изменения| |---|---|---| |2.16|2024-07-19| Для всех запросов добавлены JavaScript примеры. | |2.15|2024-07-04| Для всех запросов добавлены Python примеры. | |2.14|2024-06-26| Для всех запросов добавлены Powershell примеры. | |2.13|2024-06-19| Для всех запросов добавлены cURL примеры. | |2.12|2024-06-11| Добавлена возможность получения состояния питания и даты, до которой оплачен сервер. В методы управления сервером, добавлен возвращаемый код ошибки `409`. | |2.11|2024-05-29| Добавлена возможность управления SSH ключами и указания SSH ключа при создании сервера. | |2.10|2023-11-27| Добавлена возможность получения начального пароля от сервера при помощи GET запроса. `GET /v2/servers/$VIRTUAL_SERVER_ID/start_password` Требуется токен с правами `remove`. | |2.9|2023-11-24| Добавлена возможность получения скриншота сервера. `GET /v2/servers/$VIRTUAL_SERVER_ID/screenshot` | |2.8|2023-11-20| Ответ со статусом `403` теперь возвращает объект `api_forbidden_error`. В данном объекте дополнительно содержится поле `user_id`. | |2.7|2023-11-09| Добавлена возможность получения информации о стоимости продления виртуального сервера. `GET /v2/servers/$VIRTUAL_SERVER_ID/cost` | |2.6|2023-11-09| Добавлена возможность получения начального пароля от сервера. `POST /v2/servers/$VIRTUAL_SERVER_ID/start_password` | |2.5|2023-11-08| Добавлено получение IP адресов виртуального сервера. `GET /v2/servers/$VIRTUAL_SERVER_ID/networks` | |2.4|2023-11-07| Добавлено поле `datacenter` в объект `server`, который возвращается при получении статуса сервера. | |2.3|2023-10-31| Теперь можно предварительно узнать стоимость создания и изменения сервера при помощи параметра `get_price_only`. <br /><br /> Изменен возвращаемый объект при изменении сервера `PUT /v2/servers`. | |2.2|2023-10-23| В модель `action_error` добавлены новые типы ошибок `server_wait_for_payment` и `too_much_servers_wait_for_payment`. <br /><br /> В модель `api_action` добавлен статус `wait_user_action`. <br /><br /> Добавлена возможность выпускать токен с правами на запись. | |2.1|2023-10-12| В модель `api_error` добавлены новые типы ошибок `conflict` и `unexpected_error`. |   ## Запросы Основоной URL, на который отправляются запросы: `https://api.ruvds.com`.  Все запросы выполняются посредством HTTPS на соответствующий URI. Таким образом весть трафик зашифрован. Методы запросов соответствуют HTTP протоколу.  |Метод HTTP|Использование| |---|---| |GET| Получение информации. Данный запрос не изменяет объект. | |DELETE| Удаление объекта. Если объект не найден, то будет возвращен соответствующий код. Идемпотентность означает, что перед удалением нет необходимости проверять наличие объекта. Конечное состояние после удаления будет одним и тем же независимо от наличия объекта. | |PUT| Обновление объекта. | |POST| Создание объекта. | 
 *
 * The version of the OpenAPI document: 2.16
 * Contact: support@ruvds.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiError from '../model/ApiError';
import CpuDailyStatResponse from '../model/CpuDailyStatResponse';
import CpuHourlyStatResponse from '../model/CpuHourlyStatResponse';
import DriveDailyStatResponse from '../model/DriveDailyStatResponse';
import DriveHourlyStatResponse from '../model/DriveHourlyStatResponse';
import NetworkDailyStatResponse from '../model/NetworkDailyStatResponse';
import NetworkHourlyStatResponse from '../model/NetworkHourlyStatResponse';

/**
* Statistics service.
* @module api/StatisticsApi
* @version 2.16
*/
export default class StatisticsApi {

    /**
    * Constructs a new StatisticsApi. 
    * @alias module:api/StatisticsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the cpuDailyStat operation.
     * @callback module:api/StatisticsApi~cpuDailyStatCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CpuDailyStatResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Ежедневная статистика CPU за последние 14 дней.
     * Для получения ежедневной статистики по использованию CPU отправьте GET запрос по адресу `/v2/stat/cpu/daily/$VIRTUAL_SERVER_ID`. 
     * @param {Number} virtualServerId Уникальный ID виртуального сервера.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [sort = 'add_dt')] * `add_dt` - Сортировка по полю `add_dt`. 
     * @param {module:model/String} [order = 'asc')] * `asc` - Сортировка по возрастанию.  * `desc` - Сортировка по убыванию. 
     * @param {module:api/StatisticsApi~cpuDailyStatCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CpuDailyStatResponse}
     */
    cpuDailyStat(virtualServerId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'virtualServerId' is set
      if (virtualServerId === undefined || virtualServerId === null) {
        throw new Error("Missing the required parameter 'virtualServerId' when calling cpuDailyStat");
      }

      let pathParams = {
        'virtual_server_id': virtualServerId
      };
      let queryParams = {
        'sort': opts['sort'],
        'order': opts['order']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CpuDailyStatResponse;
      return this.apiClient.callApi(
        '/v2/stat/cpu/daily/{virtual_server_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cpuHourlyStat operation.
     * @callback module:api/StatisticsApi~cpuHourlyStatCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CpuHourlyStatResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Почасовая статистика по использованию CPU за последние 24 часа.
     * Для получения почасовой статистики по использованию CPU отправьте GET запрос по адресу `/v2/stat/cpu/hourly/$VIRTUAL_SERVER_ID`. 
     * @param {Number} virtualServerId Уникальный ID виртуального сервера.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [sort = 'add_dt')] * `add_dt` - Сортировка по полю `add_dt`. 
     * @param {module:model/String} [order = 'asc')] * `asc` - Сортировка по возрастанию.  * `desc` - Сортировка по убыванию. 
     * @param {module:api/StatisticsApi~cpuHourlyStatCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CpuHourlyStatResponse}
     */
    cpuHourlyStat(virtualServerId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'virtualServerId' is set
      if (virtualServerId === undefined || virtualServerId === null) {
        throw new Error("Missing the required parameter 'virtualServerId' when calling cpuHourlyStat");
      }

      let pathParams = {
        'virtual_server_id': virtualServerId
      };
      let queryParams = {
        'sort': opts['sort'],
        'order': opts['order']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CpuHourlyStatResponse;
      return this.apiClient.callApi(
        '/v2/stat/cpu/hourly/{virtual_server_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the driveDailyStat operation.
     * @callback module:api/StatisticsApi~driveDailyStatCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DriveDailyStatResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Ежедневная статистика по основному диску за последние 14 дней.
     * Для получения ежедневной статистики по основному диску отправьте GET запрос по адресу `/v2/stat/drive/daily/$VIRTUAL_SERVER_ID`. 
     * @param {Number} virtualServerId Уникальный ID виртуального сервера.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [sort = 'add_dt')] * `add_dt` - Сортировка по полю `add_dt`. 
     * @param {module:model/String} [order = 'asc')] * `asc` - Сортировка по возрастанию.  * `desc` - Сортировка по убыванию. 
     * @param {module:api/StatisticsApi~driveDailyStatCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DriveDailyStatResponse}
     */
    driveDailyStat(virtualServerId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'virtualServerId' is set
      if (virtualServerId === undefined || virtualServerId === null) {
        throw new Error("Missing the required parameter 'virtualServerId' when calling driveDailyStat");
      }

      let pathParams = {
        'virtual_server_id': virtualServerId
      };
      let queryParams = {
        'sort': opts['sort'],
        'order': opts['order']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DriveDailyStatResponse;
      return this.apiClient.callApi(
        '/v2/stat/drive/daily/{virtual_server_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the driveHourlyStat operation.
     * @callback module:api/StatisticsApi~driveHourlyStatCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DriveHourlyStatResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Почасовая статистика по основному диску за последние 24 часа.
     * Для получения почасовой статистики по основному диску отправьте GET запрос по адресу `/v2/stat/drive/hourly/$VIRTUAL_SERVER_ID`. 
     * @param {Number} virtualServerId Уникальный ID виртуального сервера.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [sort = 'add_dt')] * `add_dt` - Сортировка по полю `add_dt`. 
     * @param {module:model/String} [order = 'asc')] * `asc` - Сортировка по возрастанию.  * `desc` - Сортировка по убыванию. 
     * @param {module:api/StatisticsApi~driveHourlyStatCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DriveHourlyStatResponse}
     */
    driveHourlyStat(virtualServerId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'virtualServerId' is set
      if (virtualServerId === undefined || virtualServerId === null) {
        throw new Error("Missing the required parameter 'virtualServerId' when calling driveHourlyStat");
      }

      let pathParams = {
        'virtual_server_id': virtualServerId
      };
      let queryParams = {
        'sort': opts['sort'],
        'order': opts['order']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DriveHourlyStatResponse;
      return this.apiClient.callApi(
        '/v2/stat/drive/hourly/{virtual_server_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the networkDailyStat operation.
     * @callback module:api/StatisticsApi~networkDailyStatCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NetworkDailyStatResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Ежедневная статистика по использованию сети за последние 14 дней.
     * Для получения ежедневной статистики по использованию сети отправьте GET запрос по адресу `/v2/stat/network/daily/$VIRTUAL_SERVER_ID`. 
     * @param {Number} virtualServerId Уникальный ID виртуального сервера.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [sort = 'add_dt')] * `add_dt` - Сортировка по полю `add_dt`. 
     * @param {module:model/String} [order = 'asc')] * `asc` - Сортировка по возрастанию.  * `desc` - Сортировка по убыванию. 
     * @param {module:api/StatisticsApi~networkDailyStatCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NetworkDailyStatResponse}
     */
    networkDailyStat(virtualServerId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'virtualServerId' is set
      if (virtualServerId === undefined || virtualServerId === null) {
        throw new Error("Missing the required parameter 'virtualServerId' when calling networkDailyStat");
      }

      let pathParams = {
        'virtual_server_id': virtualServerId
      };
      let queryParams = {
        'sort': opts['sort'],
        'order': opts['order']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NetworkDailyStatResponse;
      return this.apiClient.callApi(
        '/v2/stat/network/daily/{virtual_server_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the networkHourlyStat operation.
     * @callback module:api/StatisticsApi~networkHourlyStatCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NetworkHourlyStatResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Почасовая статистика по использованию сети за последние 24 часа.
     * Для получения почасовой статистики по использованию сети отправьте GET запрос по адресу `/v2/stat/network/hourly/$VIRTUAL_SERVER_ID`. 
     * @param {Number} virtualServerId Уникальный ID виртуального сервера.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [sort = 'add_dt')] * `add_dt` - Сортировка по полю `add_dt`. 
     * @param {module:model/String} [order = 'asc')] * `asc` - Сортировка по возрастанию.  * `desc` - Сортировка по убыванию. 
     * @param {module:api/StatisticsApi~networkHourlyStatCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NetworkHourlyStatResponse}
     */
    networkHourlyStat(virtualServerId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'virtualServerId' is set
      if (virtualServerId === undefined || virtualServerId === null) {
        throw new Error("Missing the required parameter 'virtualServerId' when calling networkHourlyStat");
      }

      let pathParams = {
        'virtual_server_id': virtualServerId
      };
      let queryParams = {
        'sort': opts['sort'],
        'order': opts['order']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NetworkHourlyStatResponse;
      return this.apiClient.callApi(
        '/v2/stat/network/hourly/{virtual_server_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
