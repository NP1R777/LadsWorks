#
# RUVDS API
# # Введение  RUVDS API позволяет управлять серверами с помощью HTTP запросов.  API позволяет автоматически создать множество серверов, получить их статус, информацию о тарифах, датацентрах, платежах при помощи скриптов.  Документация по API начинается с общего обзора технологий, которые были реализованы. Затем представлена справочная информация о вызовах API.   ## История изменений |Версия|Дата|Изменения| |---|---|---| |2.16|2024-07-19| Для всех запросов добавлены JavaScript примеры. | |2.15|2024-07-04| Для всех запросов добавлены Python примеры. | |2.14|2024-06-26| Для всех запросов добавлены Powershell примеры. | |2.13|2024-06-19| Для всех запросов добавлены cURL примеры. | |2.12|2024-06-11| Добавлена возможность получения состояния питания и даты, до которой оплачен сервер. В методы управления сервером, добавлен возвращаемый код ошибки `409`. | |2.11|2024-05-29| Добавлена возможность управления SSH ключами и указания SSH ключа при создании сервера. | |2.10|2023-11-27| Добавлена возможность получения начального пароля от сервера при помощи GET запроса. `GET /v2/servers/$VIRTUAL_SERVER_ID/start_password` Требуется токен с правами `remove`. | |2.9|2023-11-24| Добавлена возможность получения скриншота сервера. `GET /v2/servers/$VIRTUAL_SERVER_ID/screenshot` | |2.8|2023-11-20| Ответ со статусом `403` теперь возвращает объект `api_forbidden_error`. В данном объекте дополнительно содержится поле `user_id`. | |2.7|2023-11-09| Добавлена возможность получения информации о стоимости продления виртуального сервера. `GET /v2/servers/$VIRTUAL_SERVER_ID/cost` | |2.6|2023-11-09| Добавлена возможность получения начального пароля от сервера. `POST /v2/servers/$VIRTUAL_SERVER_ID/start_password` | |2.5|2023-11-08| Добавлено получение IP адресов виртуального сервера. `GET /v2/servers/$VIRTUAL_SERVER_ID/networks` | |2.4|2023-11-07| Добавлено поле `datacenter` в объект `server`, который возвращается при получении статуса сервера. | |2.3|2023-10-31| Теперь можно предварительно узнать стоимость создания и изменения сервера при помощи параметра `get_price_only`. <br /><br /> Изменен возвращаемый объект при изменении сервера `PUT /v2/servers`. | |2.2|2023-10-23| В модель `action_error` добавлены новые типы ошибок `server_wait_for_payment` и `too_much_servers_wait_for_payment`. <br /><br /> В модель `api_action` добавлен статус `wait_user_action`. <br /><br /> Добавлена возможность выпускать токен с правами на запись. | |2.1|2023-10-12| В модель `api_error` добавлены новые типы ошибок `conflict` и `unexpected_error`. |   ## Запросы Основоной URL, на который отправляются запросы: `https://api.ruvds.com`.  Все запросы выполняются посредством HTTPS на соответствующий URI. Таким образом весть трафик зашифрован. Методы запросов соответствуют HTTP протоколу.  |Метод HTTP|Использование| |---|---| |GET| Получение информации. Данный запрос не изменяет объект. | |DELETE| Удаление объекта. Если объект не найден, то будет возвращен соответствующий код. Идемпотентность означает, что перед удалением нет необходимости проверять наличие объекта. Конечное состояние после удаления будет одним и тем же независимо от наличия объекта. | |PUT| Обновление объекта. | |POST| Создание объекта. | 
# Version: 2.16
# Contact: support@ruvds.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER VirtualServerId
ID сервера в системе.
.PARAMETER Status
Одно из возможных значений статуса сервера.
.PARAMETER CreateProgress
Прогресс создания сервера. Для созданного сервера это значение 100.
.PARAMETER Datacenter
ID дата-центра. Сответствует полю `id` объекта `datacenter`. Информацию о дата-центрах можно получить в разделе `Datacenters`.
.PARAMETER TariffId
Тарифный план
.PARAMETER PaymentPeriod
No description available.
.PARAMETER OsId
Id операционной системы. Может быть null для несозданного сервера.
.PARAMETER TemplateId
Шаблон, который использовался при создании сервера. Может быть null если при создании не использовался шаблон.
.PARAMETER Cpu
Количество ядер CPU.
.PARAMETER Ram
RAM в GB.
.PARAMETER Vram
Объем видеопамяти в Мегабайтах.
.PARAMETER Drive
Размер основного диска в GB
.PARAMETER DriveTariffId
Тарифный план определяющий типа диска из массива drive на котором установлена ОС
.PARAMETER AdditionalDrive
Размер дополнительного диска в GB. В данный момент возможно только подключение Большого диска. `null` если без дополнительного диска
.PARAMETER AdditionalDriveTariffId
Тарифный план дополнительного диска из массива additional_drive. `null`` если без дополнительного диска
.PARAMETER Ip
Количество IP адресов
.PARAMETER DdosProtection
Объем полосы для входящего легитимного трафика, кратный 0.5 Мбит/с. 0.0 если DDoS защита не подключена.
.PARAMETER UserComment
Пользовательский комментарий в ЛК RUVDS. Пустая строка в случае отсутствия
.OUTPUTS

Server<PSCustomObject>
#>

function Initialize-Server {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${VirtualServerId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("initializing", "active", "notpaid", "blocked", "deleted")]
        [String]
        ${Status},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${CreateProgress},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${Datacenter},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${TariffId},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("1", "2", "3", "4", "5")]
        [PSCustomObject]
        ${PaymentPeriod},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${OsId},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${TemplateId},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${Cpu},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [Double]
        ${Ram},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("0", "64", "128", "256", "512", "1024")]
        [System.Nullable[Int32]]
        ${Vram},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${Drive},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${DriveTariffId},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${AdditionalDrive},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${AdditionalDriveTariffId},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${Ip},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Double]]
        ${DdosProtection},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${UserComment}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => Server' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $VirtualServerId) {
            throw "invalid value for 'VirtualServerId', 'VirtualServerId' cannot be null."
        }

        if ($null -eq $Status) {
            throw "invalid value for 'Status', 'Status' cannot be null."
        }

        if ($null -eq $CreateProgress) {
            throw "invalid value for 'CreateProgress', 'CreateProgress' cannot be null."
        }

        if ($CreateProgress -gt 100) {
          throw "invalid value for 'CreateProgress', must be smaller than or equal to 100."
        }

        if ($CreateProgress -lt 0) {
          throw "invalid value for 'CreateProgress', must be greater than or equal to 0."
        }

        if ($null -eq $Datacenter) {
            throw "invalid value for 'Datacenter', 'Datacenter' cannot be null."
        }

        if ($null -eq $TariffId) {
            throw "invalid value for 'TariffId', 'TariffId' cannot be null."
        }

        if ($null -eq $PaymentPeriod) {
            throw "invalid value for 'PaymentPeriod', 'PaymentPeriod' cannot be null."
        }

        if ($null -eq $Cpu) {
            throw "invalid value for 'Cpu', 'Cpu' cannot be null."
        }

        if ($null -eq $Ram) {
            throw "invalid value for 'Ram', 'Ram' cannot be null."
        }

        if ($null -eq $Drive) {
            throw "invalid value for 'Drive', 'Drive' cannot be null."
        }

        if ($null -eq $DriveTariffId) {
            throw "invalid value for 'DriveTariffId', 'DriveTariffId' cannot be null."
        }

        if ($null -eq $Ip) {
            throw "invalid value for 'Ip', 'Ip' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "virtual_server_id" = ${VirtualServerId}
            "status" = ${Status}
            "create_progress" = ${CreateProgress}
            "datacenter" = ${Datacenter}
            "tariff_id" = ${TariffId}
            "payment_period" = ${PaymentPeriod}
            "os_id" = ${OsId}
            "template_id" = ${TemplateId}
            "cpu" = ${Cpu}
            "ram" = ${Ram}
            "vram" = ${Vram}
            "drive" = ${Drive}
            "drive_tariff_id" = ${DriveTariffId}
            "additional_drive" = ${AdditionalDrive}
            "additional_drive_tariff_id" = ${AdditionalDriveTariffId}
            "ip" = ${Ip}
            "ddos_protection" = ${DdosProtection}
            "user_comment" = ${UserComment}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Server<PSCustomObject>

.DESCRIPTION

Convert from JSON to Server<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Server<PSCustomObject>
#>
function ConvertFrom-JsonToServer {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => Server' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in Server
        $AllProperties = ("virtual_server_id", "status", "create_progress", "datacenter", "tariff_id", "payment_period", "os_id", "template_id", "cpu", "ram", "vram", "drive", "drive_tariff_id", "additional_drive", "additional_drive_tariff_id", "ip", "ddos_protection", "user_comment")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'virtual_server_id' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "virtual_server_id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'virtual_server_id' missing."
        } else {
            $VirtualServerId = $JsonParameters.PSobject.Properties["virtual_server_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "status"))) {
            throw "Error! JSON cannot be serialized due to the required property 'status' missing."
        } else {
            $Status = $JsonParameters.PSobject.Properties["status"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "create_progress"))) {
            throw "Error! JSON cannot be serialized due to the required property 'create_progress' missing."
        } else {
            $CreateProgress = $JsonParameters.PSobject.Properties["create_progress"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "datacenter"))) {
            throw "Error! JSON cannot be serialized due to the required property 'datacenter' missing."
        } else {
            $Datacenter = $JsonParameters.PSobject.Properties["datacenter"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "tariff_id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'tariff_id' missing."
        } else {
            $TariffId = $JsonParameters.PSobject.Properties["tariff_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "payment_period"))) {
            throw "Error! JSON cannot be serialized due to the required property 'payment_period' missing."
        } else {
            $PaymentPeriod = $JsonParameters.PSobject.Properties["payment_period"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "os_id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'os_id' missing."
        } else {
            $OsId = $JsonParameters.PSobject.Properties["os_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "template_id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'template_id' missing."
        } else {
            $TemplateId = $JsonParameters.PSobject.Properties["template_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "cpu"))) {
            throw "Error! JSON cannot be serialized due to the required property 'cpu' missing."
        } else {
            $Cpu = $JsonParameters.PSobject.Properties["cpu"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ram"))) {
            throw "Error! JSON cannot be serialized due to the required property 'ram' missing."
        } else {
            $Ram = $JsonParameters.PSobject.Properties["ram"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "drive"))) {
            throw "Error! JSON cannot be serialized due to the required property 'drive' missing."
        } else {
            $Drive = $JsonParameters.PSobject.Properties["drive"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "drive_tariff_id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'drive_tariff_id' missing."
        } else {
            $DriveTariffId = $JsonParameters.PSobject.Properties["drive_tariff_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ip"))) {
            throw "Error! JSON cannot be serialized due to the required property 'ip' missing."
        } else {
            $Ip = $JsonParameters.PSobject.Properties["ip"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "vram"))) { #optional property not found
            $Vram = $null
        } else {
            $Vram = $JsonParameters.PSobject.Properties["vram"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "additional_drive"))) { #optional property not found
            $AdditionalDrive = $null
        } else {
            $AdditionalDrive = $JsonParameters.PSobject.Properties["additional_drive"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "additional_drive_tariff_id"))) { #optional property not found
            $AdditionalDriveTariffId = $null
        } else {
            $AdditionalDriveTariffId = $JsonParameters.PSobject.Properties["additional_drive_tariff_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "ddos_protection"))) { #optional property not found
            $DdosProtection = $null
        } else {
            $DdosProtection = $JsonParameters.PSobject.Properties["ddos_protection"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "user_comment"))) { #optional property not found
            $UserComment = $null
        } else {
            $UserComment = $JsonParameters.PSobject.Properties["user_comment"].value
        }

        $PSO = [PSCustomObject]@{
            "virtual_server_id" = ${VirtualServerId}
            "status" = ${Status}
            "create_progress" = ${CreateProgress}
            "datacenter" = ${Datacenter}
            "tariff_id" = ${TariffId}
            "payment_period" = ${PaymentPeriod}
            "os_id" = ${OsId}
            "template_id" = ${TemplateId}
            "cpu" = ${Cpu}
            "ram" = ${Ram}
            "vram" = ${Vram}
            "drive" = ${Drive}
            "drive_tariff_id" = ${DriveTariffId}
            "additional_drive" = ${AdditionalDrive}
            "additional_drive_tariff_id" = ${AdditionalDriveTariffId}
            "ip" = ${Ip}
            "ddos_protection" = ${DdosProtection}
            "user_comment" = ${UserComment}
        }

        return $PSO
    }

}

