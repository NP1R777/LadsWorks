#
# RUVDS API
# # Введение  RUVDS API позволяет управлять серверами с помощью HTTP запросов.  API позволяет автоматически создать множество серверов, получить их статус, информацию о тарифах, датацентрах, платежах при помощи скриптов.  Документация по API начинается с общего обзора технологий, которые были реализованы. Затем представлена справочная информация о вызовах API.   ## История изменений |Версия|Дата|Изменения| |---|---|---| |2.16|2024-07-19| Для всех запросов добавлены JavaScript примеры. | |2.15|2024-07-04| Для всех запросов добавлены Python примеры. | |2.14|2024-06-26| Для всех запросов добавлены Powershell примеры. | |2.13|2024-06-19| Для всех запросов добавлены cURL примеры. | |2.12|2024-06-11| Добавлена возможность получения состояния питания и даты, до которой оплачен сервер. В методы управления сервером, добавлен возвращаемый код ошибки `409`. | |2.11|2024-05-29| Добавлена возможность управления SSH ключами и указания SSH ключа при создании сервера. | |2.10|2023-11-27| Добавлена возможность получения начального пароля от сервера при помощи GET запроса. `GET /v2/servers/$VIRTUAL_SERVER_ID/start_password` Требуется токен с правами `remove`. | |2.9|2023-11-24| Добавлена возможность получения скриншота сервера. `GET /v2/servers/$VIRTUAL_SERVER_ID/screenshot` | |2.8|2023-11-20| Ответ со статусом `403` теперь возвращает объект `api_forbidden_error`. В данном объекте дополнительно содержится поле `user_id`. | |2.7|2023-11-09| Добавлена возможность получения информации о стоимости продления виртуального сервера. `GET /v2/servers/$VIRTUAL_SERVER_ID/cost` | |2.6|2023-11-09| Добавлена возможность получения начального пароля от сервера. `POST /v2/servers/$VIRTUAL_SERVER_ID/start_password` | |2.5|2023-11-08| Добавлено получение IP адресов виртуального сервера. `GET /v2/servers/$VIRTUAL_SERVER_ID/networks` | |2.4|2023-11-07| Добавлено поле `datacenter` в объект `server`, который возвращается при получении статуса сервера. | |2.3|2023-10-31| Теперь можно предварительно узнать стоимость создания и изменения сервера при помощи параметра `get_price_only`. <br /><br /> Изменен возвращаемый объект при изменении сервера `PUT /v2/servers`. | |2.2|2023-10-23| В модель `action_error` добавлены новые типы ошибок `server_wait_for_payment` и `too_much_servers_wait_for_payment`. <br /><br /> В модель `api_action` добавлен статус `wait_user_action`. <br /><br /> Добавлена возможность выпускать токен с правами на запись. | |2.1|2023-10-12| В модель `api_error` добавлены новые типы ошибок `conflict` и `unexpected_error`. |   ## Запросы Основоной URL, на который отправляются запросы: `https://api.ruvds.com`.  Все запросы выполняются посредством HTTPS на соответствующий URI. Таким образом весть трафик зашифрован. Методы запросов соответствуют HTTP протоколу.  |Метод HTTP|Использование| |---|---| |GET| Получение информации. Данный запрос не изменяет объект. | |DELETE| Удаление объекта. Если объект не найден, то будет возвращен соответствующий код. Идемпотентность означает, что перед удалением нет необходимости проверять наличие объекта. Конечное состояние после удаления будет одним и тем же независимо от наличия объекта. | |PUT| Обновление объекта. | |POST| Создание объекта. | 
# Version: 2.16
# Contact: support@ruvds.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Id
Уникальный ID действия.
.PARAMETER Type
* `server_create` - Действие создается при отправке запроса через API на создание виртуального сервера. * `server_change` - Действие создается при отправке запроса через API на изменение конфигурации виртуального сервера. * `server_remove` - Действие создается при отправке запроса через API на удаление виртуального сервера. * `power_on` - Действие создается при отправке запроса через API на включение виртуального сервера. * `power_off` - Действие создается при отправке запроса через API на отключение питания виртуального сервера. * `shutdown` - Действие создается при отправке запроса через API на выключение виртуального сервера посредством отправки команды гостевой ОС. * `reboot` - Действие создается при отправке запроса через API на перезагрузку виртуального сервера. * `unknown` - Неизвестное действие, например, созданное не через API.
.PARAMETER Status
* `running` - Действие в процессе выполнения. * `success` - Действие успешно завершилось. * `error` - Действие завершилось с ошибкой. * `wait_user_action` - Для продолжения выполнения необходимо действие со стороны пользователя. Например, внесение оплаты.
.PARAMETER Progress
Прогресс действия в процентах. У завершенных действий значение 100.
.PARAMETER Started
Время начала действия.
.PARAMETER Finished
Время окончания действия.
.PARAMETER ResourceId
ID ресурса к которому относится данное действие.
.PARAMETER ResourceType
* `server` - Действие посредством API над виртуальным сервером. Поле `resource_id` содержит ID сервера.
.PARAMETER ActionError
No description available.
.OUTPUTS

ApiAction<PSCustomObject>
#>

function Initialize-ApiAction {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${Id},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("server_create", "server_change", "server_remove", "power_on", "power_off", "shutdown", "reboot", "unknown")]
        [String]
        ${Type},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("running", "success", "error", "wait_user_action")]
        [String]
        ${Status},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${Progress},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.DateTime]
        ${Started},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[System.DateTime]]
        ${Finished},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [Int32]
        ${ResourceId},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("server")]
        [String]
        ${ResourceType},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${ActionError}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ApiAction' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $Id) {
            throw "invalid value for 'Id', 'Id' cannot be null."
        }

        if ($null -eq $Type) {
            throw "invalid value for 'Type', 'Type' cannot be null."
        }

        if ($null -eq $Status) {
            throw "invalid value for 'Status', 'Status' cannot be null."
        }

        if ($null -eq $Progress) {
            throw "invalid value for 'Progress', 'Progress' cannot be null."
        }

        if ($Progress -gt 100) {
          throw "invalid value for 'Progress', must be smaller than or equal to 100."
        }

        if ($Progress -lt 0) {
          throw "invalid value for 'Progress', must be greater than or equal to 0."
        }

        if ($null -eq $Started) {
            throw "invalid value for 'Started', 'Started' cannot be null."
        }

        if ($null -eq $ResourceId) {
            throw "invalid value for 'ResourceId', 'ResourceId' cannot be null."
        }

        if ($null -eq $ResourceType) {
            throw "invalid value for 'ResourceType', 'ResourceType' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "type" = ${Type}
            "status" = ${Status}
            "progress" = ${Progress}
            "started" = ${Started}
            "finished" = ${Finished}
            "resource_id" = ${ResourceId}
            "resource_type" = ${ResourceType}
            "action_error" = ${ActionError}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ApiAction<PSCustomObject>

.DESCRIPTION

Convert from JSON to ApiAction<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ApiAction<PSCustomObject>
#>
function ConvertFrom-JsonToApiAction {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ApiAction' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ApiAction
        $AllProperties = ("id", "type", "status", "progress", "started", "finished", "resource_id", "resource_type", "action_error")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'id' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'id' missing."
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) {
            throw "Error! JSON cannot be serialized due to the required property 'type' missing."
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "status"))) {
            throw "Error! JSON cannot be serialized due to the required property 'status' missing."
        } else {
            $Status = $JsonParameters.PSobject.Properties["status"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "progress"))) {
            throw "Error! JSON cannot be serialized due to the required property 'progress' missing."
        } else {
            $Progress = $JsonParameters.PSobject.Properties["progress"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "started"))) {
            throw "Error! JSON cannot be serialized due to the required property 'started' missing."
        } else {
            $Started = $JsonParameters.PSobject.Properties["started"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "resource_id"))) {
            throw "Error! JSON cannot be serialized due to the required property 'resource_id' missing."
        } else {
            $ResourceId = $JsonParameters.PSobject.Properties["resource_id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "resource_type"))) {
            throw "Error! JSON cannot be serialized due to the required property 'resource_type' missing."
        } else {
            $ResourceType = $JsonParameters.PSobject.Properties["resource_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "finished"))) { #optional property not found
            $Finished = $null
        } else {
            $Finished = $JsonParameters.PSobject.Properties["finished"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "action_error"))) { #optional property not found
            $ActionError = $null
        } else {
            $ActionError = $JsonParameters.PSobject.Properties["action_error"].value
        }

        $PSO = [PSCustomObject]@{
            "id" = ${Id}
            "type" = ${Type}
            "status" = ${Status}
            "progress" = ${Progress}
            "started" = ${Started}
            "finished" = ${Finished}
            "resource_id" = ${ResourceId}
            "resource_type" = ${ResourceType}
            "action_error" = ${ActionError}
        }

        return $PSO
    }

}

