#
# RUVDS API
# # Введение  RUVDS API позволяет управлять серверами с помощью HTTP запросов.  API позволяет автоматически создать множество серверов, получить их статус, информацию о тарифах, датацентрах, платежах при помощи скриптов.  Документация по API начинается с общего обзора технологий, которые были реализованы. Затем представлена справочная информация о вызовах API.   ## История изменений |Версия|Дата|Изменения| |---|---|---| |2.16|2024-07-19| Для всех запросов добавлены JavaScript примеры. | |2.15|2024-07-04| Для всех запросов добавлены Python примеры. | |2.14|2024-06-26| Для всех запросов добавлены Powershell примеры. | |2.13|2024-06-19| Для всех запросов добавлены cURL примеры. | |2.12|2024-06-11| Добавлена возможность получения состояния питания и даты, до которой оплачен сервер. В методы управления сервером, добавлен возвращаемый код ошибки `409`. | |2.11|2024-05-29| Добавлена возможность управления SSH ключами и указания SSH ключа при создании сервера. | |2.10|2023-11-27| Добавлена возможность получения начального пароля от сервера при помощи GET запроса. `GET /v2/servers/$VIRTUAL_SERVER_ID/start_password` Требуется токен с правами `remove`. | |2.9|2023-11-24| Добавлена возможность получения скриншота сервера. `GET /v2/servers/$VIRTUAL_SERVER_ID/screenshot` | |2.8|2023-11-20| Ответ со статусом `403` теперь возвращает объект `api_forbidden_error`. В данном объекте дополнительно содержится поле `user_id`. | |2.7|2023-11-09| Добавлена возможность получения информации о стоимости продления виртуального сервера. `GET /v2/servers/$VIRTUAL_SERVER_ID/cost` | |2.6|2023-11-09| Добавлена возможность получения начального пароля от сервера. `POST /v2/servers/$VIRTUAL_SERVER_ID/start_password` | |2.5|2023-11-08| Добавлено получение IP адресов виртуального сервера. `GET /v2/servers/$VIRTUAL_SERVER_ID/networks` | |2.4|2023-11-07| Добавлено поле `datacenter` в объект `server`, который возвращается при получении статуса сервера. | |2.3|2023-10-31| Теперь можно предварительно узнать стоимость создания и изменения сервера при помощи параметра `get_price_only`. <br /><br /> Изменен возвращаемый объект при изменении сервера `PUT /v2/servers`. | |2.2|2023-10-23| В модель `action_error` добавлены новые типы ошибок `server_wait_for_payment` и `too_much_servers_wait_for_payment`. <br /><br /> В модель `api_action` добавлен статус `wait_user_action`. <br /><br /> Добавлена возможность выпускать токен с правами на запись. | |2.1|2023-10-12| В модель `api_error` добавлены новые типы ошибок `conflict` и `unexpected_error`. |   ## Запросы Основоной URL, на который отправляются запросы: `https://api.ruvds.com`.  Все запросы выполняются посредством HTTPS на соответствующий URI. Таким образом весть трафик зашифрован. Методы запросов соответствуют HTTP протоколу.  |Метод HTTP|Использование| |---|---| |GET| Получение информации. Данный запрос не изменяет объект. | |DELETE| Удаление объекта. Если объект не найден, то будет возвращен соответствующий код. Идемпотентность означает, что перед удалением нет необходимости проверять наличие объекта. Конечное состояние после удаления будет одним и тем же независимо от наличия объекта. | |PUT| Обновление объекта. | |POST| Создание объекта. | 
# Version: 2.16
# Contact: support@ruvds.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Login
Логин для доступа к серверу.  Обратите внимание, что для Linux серверов, рекомендуется при первом заходе создать другого пользователя с правами `sudo` и запретить ssh логин под `root` пользователем. Дополнительно рекомендуется настроить Firewall.  Для Windows серверов при первом заходе рекомендуется настроить Firewall c целью предотвращения брутфорса.
.PARAMETER LoginType
Тип подключения к серверу. Зависит от Операционной системы, установленной на сервере.  * `rdp` - Подключение к Windows серверу по протоколу *RDP*.  * `ssh` - Подключение к Linux серверу по протоколу *SSH*.
.PARAMETER Password
Байтовое представление `UTF-8` строки с паролем в `base64` либо `base64url` формате. Формат зависит от поля `response_format` в запросе.  Обратите внимание, что в целях безопасности этот пароль *рекомендуется сменить* при первом заходе на сервер.  Во избежание брутфорса пароля рекомендуется настроить Firewall.
.PARAMETER PasswordFormat
В каком формате представлены байты строки с паролем. Формат зависит от поля `response_format` в запросе.
.OUTPUTS

StartPasswordResponse<PSCustomObject>
#>

function Initialize-StartPasswordResponse {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Login},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("rdp", "ssh")]
        [String]
        ${LoginType},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Password},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("base64", "base64url")]
        [String]
        ${PasswordFormat}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => StartPasswordResponse' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "login" = ${Login}
            "login_type" = ${LoginType}
            "password" = ${Password}
            "password_format" = ${PasswordFormat}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to StartPasswordResponse<PSCustomObject>

.DESCRIPTION

Convert from JSON to StartPasswordResponse<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

StartPasswordResponse<PSCustomObject>
#>
function ConvertFrom-JsonToStartPasswordResponse {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => StartPasswordResponse' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in StartPasswordResponse
        $AllProperties = ("login", "login_type", "password", "password_format")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "login"))) { #optional property not found
            $Login = $null
        } else {
            $Login = $JsonParameters.PSobject.Properties["login"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "login_type"))) { #optional property not found
            $LoginType = $null
        } else {
            $LoginType = $JsonParameters.PSobject.Properties["login_type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "password"))) { #optional property not found
            $Password = $null
        } else {
            $Password = $JsonParameters.PSobject.Properties["password"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "password_format"))) { #optional property not found
            $PasswordFormat = $null
        } else {
            $PasswordFormat = $JsonParameters.PSobject.Properties["password_format"].value
        }

        $PSO = [PSCustomObject]@{
            "login" = ${Login}
            "login_type" = ${LoginType}
            "password" = ${Password}
            "password_format" = ${PasswordFormat}
        }

        return $PSO
    }

}

